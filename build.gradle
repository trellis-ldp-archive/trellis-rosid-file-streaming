plugins {
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'net.researchgate.release' version '2.6.0'
    id 'org.sonarqube' version '2.5'
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'checkstyle'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8


group = 'org.trellisldp'
description = 'File-based Trellis Stream Processor'
mainClassName = 'org.trellisldp.rosid.file.streaming.StreamPipeline'

ext {
    vendor = 'Trellis LDP'
    homepage = 'http://www.trellisldp.org'
    docURL = 'http://www.trellisldp.org/apidocs'
    license = 'Apache 2'

    /* Dependencies */
    trellisRosidFileVersion = '0.1.0-SNAPSHOT'
    beamVersion = '2.0.0'
    slf4jVersion = '1.7.25'
    logbackVersion = '1.2.3'

    /* OSGi */
    projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")
}

configurations {
    buildToolsConfig
}

dependencies {
    compile group: 'org.trellisldp', name: 'trellis-rosid-file', version: trellisRosidFileVersion
    compile group: 'org.apache.beam', name: 'beam-sdks-java-core', version: beamVersion
    compile group: 'org.apache.beam', name: 'beam-sdks-java-io-kafka', version: beamVersion
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion

    if (project.hasProperty("spark")) {
        compile group: 'org.apache.beam', name: 'beam-runners-spark', version: beamVersion
    } else if (project.hasProperty("flink")) {
        compile group: 'org.apache.beam', name: 'beam-runners-flink_2.10', version: beamVersion
    } else if (project.hasProperty("apex")) {
        compile group: 'org.apache.beam', name: 'beam-runners-apex', version: beamVersion
    } else if (project.hasProperty("google")) {
        compile group: 'org.apache.beam', name: 'beam-runners-google-cloud-dataflow-java', version: beamVersion
    } else {
        compile group: 'org.apache.beam', name: 'beam-runners-direct-java', version: beamVersion
    }

    buildToolsConfig 'org.trellisldp:trellis-build-tools:0.1.1'
}

shadowJar {
    baseName = 'trellis-processing'
    classifier = null
    version = null
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    // TODO -- remove this after the first release of the API
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

release {
    tagTemplate = '$name-$version'
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar
    archives sourceJar
    archives shadowJar
}

jacoco {
    toolVersion = "0.7.9"
}

license {
    include "**/*.java"
    header rootProject.file('build/license/HEADER.txt')
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

publishing {
    publications {
        maven(MavenPublication) { pub ->
            project.shadow.component(pub)
        }
    }
}

processResources {
    outputs.upToDateWhen { false }
}

signing {
    required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        def sonatypeUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : ""
        def sonatypePassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ""
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.project {
            packaging 'jar'
            url 'http://www.trellisldp.org'
            inceptionYear '2017'
            name 'Trellis Repository Implementation'
            description 'A high performance implementation of a trellis repository'

            organization {
                name project.vendor
                url project.homepage
            }

            developers {
                developer {
                    id 'acoburn'
                    name 'Aaron Coburn'
                    email 'acoburn @ (domain of organization url)'
                    organization 'Amherst College'
                    organizationUrl 'https://www.amherst.edu'
                    roles {
                        role 'developer'
                    }
                    timezone '-5'
                }
            }

            scm {
                connection 'scm:git:git://github.com/trellis-ldp/trellis-rosid-file-streaming.git'
                developerConnection 'scm:git:git@github.com/trellis-ldp/trellis-rosid-file-streaming.git'
                url 'https://github.com/trellis-ldp/trellis-rosid-file-streaming'
                tag 'HEAD'
            }

            licenses {
                license {
                    name 'Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                    comments 'Copyright (c) 2017 Trellis LDP'
                }
            }
        }
    }
}

task processBuildTools(type: Copy) {
    from {
        configurations.buildToolsConfig.collect {
            zipTree(it).matching {
                include 'checkstyle/*.xml'
                include 'license/*.txt'
            }
        }
    }
    into 'build'
}

checkstyle {
    configFile = rootProject.file('build/checkstyle/checkstyle.xml')
    configProperties.checkstyleConfigDir = rootProject.file('build/checkstyle/')
}

sonarqube {
    properties {
        property "sonar.projectName", "Trellis Repository Rosid Stream Processing (File)"
        property "sonar.projectKey", "org.trellisldp:trellis-rosid-file-streaming"
        property "sonar.links.homepage", "https://github.com/trellis-ldp/trellis"
        property "sonar.links.issue", "https://github.com/trellis-ldp/trellis-rosid-file-streaming/issues"
        property "sonar.links.scm_dev", "scm:git:git@github.com:trellis-ldp/trellis-rosid-file-streaming.git"
    }
}

task docs(type: Javadoc) {
    outputs.upToDateWhen { false }
    source sourceSets.main.allJava
    classpath = files(sourceSets.main.compileClasspath)
    options {
        links "http://docs.oracle.com/javase/8/docs/api/"
        links "https://commons.apache.org/proper/commons-rdf/apidocs/"
        links "https://kafka.apache.org/0110/javadoc/"
        links "http://www.trellisldp.org/apidocs/"
    }
    destinationDir = new File(projectDir, "docs/${version}")
}

checkstyleMain.dependsOn processBuildTools
afterReleaseBuild.dependsOn docs

